#!/usr/bin/env python3

import sys
import hashlib
import base64
import uuid
import os
from pathlib import Path
import configparser
import argparse
import logging

def setup_logging(level=logging.INFO):
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

def generate_pbkdf2(password: str) -> str:
    salt = uuid.uuid4().bytes
    hashed_password = hashlib.pbkdf2_hmac('sha512', password.encode(), salt, 100000, dklen=64)
    b64_salt = base64.b64encode(salt).decode("utf-8")
    b64_password = base64.b64encode(hashed_password).decode("utf-8")
    return f"@ByteArray({b64_salt}:{b64_password})"

def get_password_from_env() -> str:
    env_vars = {
        "WEB_PASSWORD": None,
        "WEB_PASSWORD_FILE": None,
        "WEB_PBKDF2_PASSWORD": None,
        "WEB_PBKDF2_PASSWORD_FILE": None
    }

    for var, file_var in [("WEB_PASSWORD", "WEB_PASSWORD_FILE"), 
                          ("WEB_PBKDF2_PASSWORD", "WEB_PBKDF2_PASSWORD_FILE")]:
        value = os.environ.get(var)
        file_path = os.environ.get(file_var)

        if file_path:
            try:
                with open(file_path, 'r') as f:
                    value = f.read().strip()
            except IOError as e:
                logging.error(f"Error reading {file_var}: {e}")
                continue

        if value:
            env_vars[var] = value
            break

    if env_vars["WEB_PASSWORD"]:
        return generate_pbkdf2(env_vars["WEB_PASSWORD"])
    elif env_vars["WEB_PBKDF2_PASSWORD"]:
        return env_vars["WEB_PBKDF2_PASSWORD"]
    else:
        return None

def update_qbittorrent_config(config_path: str, username: str, password: str):
    config = configparser.ConfigParser()
    config.optionxform = str  # Preserve case for keys

    try:
        config.read(config_path)
    except configparser.Error as e:
        logging.error(f"Error reading configuration file: {e}")
        sys.exit(1)

    if "Preferences" not in config:
        config["Preferences"] = {}

    config["Preferences"]["WebUI\\Username"] = username
    if password:
        config["Preferences"]["WebUI\\Password_PBKDF2"] = password
    else:
        logging.warning("No password set. Skipping password configuration.")

    try:
        with open(config_path, 'w') as configfile:
            config.write(configfile, space_around_delimiters=False)
        logging.info("Configuration updated successfully.")
    except IOError as e:
        logging.error(f"Error writing configuration file: {e}")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Update qBittorrent configuration with username and password.")
    parser.add_argument("config_path", help="Path to qBittorrent configuration file")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    args = parser.parse_args()

    setup_logging(level=logging.DEBUG if args.debug else logging.INFO)

    username = os.environ.get("WEB_USER", "admin")
    password = get_password_from_env()

    update_qbittorrent_config(args.config_path, username, password)

if __name__ == '__main__':
    main()